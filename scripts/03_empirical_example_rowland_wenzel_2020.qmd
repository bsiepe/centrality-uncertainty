---
title: "Centrality"
format: html
---

# Preparation

```{r setup, include = FALSE}
# Libraries
library(tidyverse)
library(rmarkdown)
library(graphicalVAR)
library(mlVAR)
library(parallel)
library(here)
library(broom)
library(gimme)
library(rstan)
library(bayesplot)
library(posterior)
library(gridExtra)
library(psych)
library(imputeTS)

source(here("scripts", "functions.R"))
set.seed(35037)
```

### Load Data
```{r}
df_affect <-
  read.csv(here("data", "rowland_wenzel_2020", "data_affect.csv")) %>%
  mutate(id = subjno, .before = everything()) %>%
  select(-subjno) %>%
  mutate(group = group - 1)
df_density <-
  read.csv(here("data", "rowland_wenzel_2020", "data_net_density.csv")) 
  # mutate(id = as.factor(subjno) %>% as.numeric(), .before = everything()) %>%
  # select(-subjno)
df <- full_join(df_affect, df_density)

```


### Missing Data Imputation
```{r }
df_imputed <-
  lapply(5:12, function(x)
    imputeTS::na_kalman(df[x])) %>%  
  do.call(cbind, .) %>% 
  cbind(df[1:4], .)
```

```{r}
for(i in 5:12) {
  print(
    imputeTS::ggplot_na_imputations(
      x_with_na = df[, i], 
      x_with_imputations = df_imputed[, i])
  )
}
```

```{r}
Y <- df_imputed[ ,5:12]

I <- length(unique(df_imputed$id))
K <- ncol(Y)
n_pc <-  K * (K - 1) / 2
idx_rho <- upper.tri(matrix(1, K, K, byrow = F)) %>% 
  c() %>% 
  which(.)
n_t <- df_imputed %>% 
  group_by(id) %>% 
  summarise(n = n()) %>% 
  pull(n)

mindfullness <- df %>% 
  distinct(id, smaas) %>% select(smaas) %>% mutate(smaas = scale(smaas))  %>% unlist()
```

## Fit VAR Model in Stan
```{r stan data & compilation, renv.ignore = TRUE}
# prepare stan data
stan_data <-
  list(
    K = K,
    I = I,
    N_total = nrow(Y),
    n_t = n_t,
    n_pc = n_pc,
    idx_rho = idx_rho,
    Y = Y,
    reg_covariate = mindfullness
  )
# Choose model to fit
model_name <- "MLVAR_no_regression"
# Compile model
mlvar_model <-
  rstan::stan_model(
    file = here("scripts", "models", paste0(model_name, ".stan")),
    model_name = model_name
  )
```

```{r sampling, message=FALSE, renv.ignore=TRUE, eval=FALSE}
# number of MCMC chains
n_chains <- 4
# Run sampler
mlvar_fit <- rstan::sampling(
  object = mlvar_model,
  data = stan_data,
  seed = 2023,
  chains = n_chains,
  cores = n_chains,
  warmup = 500,
  iter = 1000,
  init = .1,
  control = list(adapt_delta = 0.9),
  verbose = FALSE
)
saveRDS(mlvar_fit, 
        here("fits", paste0("rowland_wenzel_2020", model_name, "_fit.rds")))
```

## Effective sample size (ESS) & Rhat Plots
```{r ,  renv.ignore=TRUE, eval = FALSE}
# color scheme
color_scheme_set(scheme = "purple")
# Effective sample sizes
plot_neff <-
  mcmc_neff_hist(bayesplot::neff_ratio(mlvar_fit), binwidth = .01) +
  labs(title = "A") +
  guides(color = "none", fill = "none") +
  theme(
    legend.text = element_blank(),
    legend.key = element_blank(),
    title = element_text(size = 16, face = "bold")
  )
# Rhat
# BS: Why does this have missings?
plot_rhat <-
  bayesplot::mcmc_rhat_hist(bayesplot::rhat(mlvar_fit)) +
  labs(title = "B") +
  guides(color = "none", fill = "none") +
  theme(
    legend.text = element_blank(),
    legend.key = element_blank(),
    title = element_text(size = 16, face = "bold")
  ) +
  yaxis_text(on = TRUE)
# Combined plot
plot_diagnostics <- grid.arrange(plot_neff, plot_rhat, ncol = 2)
```

```{r}
param_ests <- summarise_draws(mlvar_fit)
```

# Parameter Recovery
### Betas
```{r renv.ignore=TRUE}
t_oad <- df %>% 
  distinct(id, t_oad) %>% select(t_oad) %>% pull()

draws_beta_dens <- rstan::extract(mlvar_fit, "Beta_density", permuted = FALSE) %>% as_draws_array()

bayesplot::mcmc_recover_scatter(x = draws_beta_dens,
                                true = t_oad)

```

```{r renv.ignore=TRUE}
t_oad <- df %>% 
  distinct(id, t_oad) %>% select(t_oad) %>% pull()

draws_beta_dens <- rstan::extract(mlvar_fit, "Beta_density", permuted = FALSE) %>% as_draws_array()

bayesplot::mcmc_recover_scatter(x = draws_beta_dens,
                                true = t_oad)

```


## Regression
```{r message=FALSE, warning=FALSE, renv.ignore=TRUE}
draws_rho_loc <- 
  rstan::extract(mlvar_fit, "rho_loc", permuted = FALSE) %>%
  as_draws_df()
for (n in 1:n_pc) {
 plot <-  bayesplot::mcmc_intervals(
    draws_rho_loc %>%
      select(ends_with(paste0(",", n, "]"))) %>% 
      as_draws_array()) +
    xlim(0,1) 
  print(plot)
}
```
