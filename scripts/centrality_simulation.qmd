---
title: "Centrality Simulation"
format: html
---

# Background
This script contains the `SimDesign` code for the simulation study. 

We first load all relevant packages: 
```{r packages}
library(tidyverse)
library(SimDesign)
library(mlVAR)
library(graphicalVAR)
library(gimme)
library(here)
source(here("scripts", "functions.R"))
# source(here("scripts", "MLVAR_fit_stan_wrapper.qmd"))

```




# Data Generation

## Data-Generating Processes

Old DGPS with mlVAR_sim:
```{r dgps}
# Settings for data simulation
# for mlvar sim
thetaVar = 1
DF_theta = 2
mu_SD = c(1, 1)
init_beta_SD = c(0.3, 1.5) 
fixedMuSD = 1
shrink_fixed = 0.9
shrink_deviation = 0.9
pcor_sparsity = 0.5
beta_sparsity = 0.5

# for regression
reg_error_sd = 1

# Parameters
# sim_pars_old <- list(
#   reg_error_sd = reg_error_sd,
#   thetaVar = thetaVar,
#   DF_theta = DF_theta,
#   mu_SD = mu_SD,
#   init_beta_SD = init_beta_SD,
#   fixedMuSD = fixedMuSD,
#   shrink_fixed = shrink_fixed,
#   shrink_deviation = shrink_deviation
#   # mlvar_model = mlvar_model
# )
```


New DGP with specific graph: 
```{r}
# non-sparse Graph to simulate from
graph_nonsparse <- readRDS(here("data/graph_nonsparse.RDS"))

# sparse DGP
graph_sparse <- readRDS(here("data/graph_sparse.RDS"))
```



## Setting parameters
```{r params}
# Simulation parameters
# Number of individuals 
n_id <- 200

# Number of variables
n_var <- 6

# Number of timepoints
n_tp <- 150

# random effects sds
beta_sd <- 0.1
kappa_sd <- 0.1

# Type of DGP
dgp <- c("sparse", "dense")

# Heterogeneity
heterogeneity <- c("low", "high")

# # Strength of the correlation
# hard-coded down below
# beta_reg <- c(0, 0.2, 0.4)



# Design
df_design <- SimDesign::createDesign(
  dgp = dgp,
  heterogeneity = heterogeneity
  )



sim_pars <- list(
  n_id = n_id,
  n_var = n_var,
  n_tp = n_tp,
  reg_error_sd = reg_error_sd,
  beta_sd = beta_sd,
  kappa_sd = kappa_sd,
  graph_nonsparse = graph_nonsparse,
  graph_sparse = graph_sparse
)
```



## Simulating Data
```{r data-generation}
sim_generate <- function(condition, fixed_objects = NULL){
  
  # obtain fixed params
  SimDesign::Attach(fixed_objects)

  dgp_graph <- ifelse(condition$dgp == "sparse", 
                      "graph_sparse", 
                      "graph_nonsparse")
  
  ml_sim <- sim_gvar_loop(
                     graph = fixed_objects[[dgp_graph]],
                     beta_sd = beta_sd,
                     kappa_sd = kappa_sd,
                     n_person = n_id,
                     n_time = n_tp,
                     n_node = n_var,
                     max_try = 10000)
  
  # Obtain true centralities
  true_cent <- centrality_mlvar_sim(ml_sim,
                                    sim_fn = "sim_gvar_loop")
  
  # TODO think about if scaling is okay here
  tempdens <- unlist(true_cent$dens_temp) |> scale()
  outstrength <- sapply(true_cent$outstrength, `[`, 1) |> scale()
  contdens <- unlist(true_cent$dens_cont) |> scale()
  
  
  # Simulate covariate with certain error
  eps_sd <- reg_error_sd

  # Simulate error
  resid_dens <- rnorm(n_id, mean = 0, sd = eps_sd)
  resid_cent <- rnorm(n_id, mean = 0, sd = eps_sd)

  # covariate_tempdens = rep(condition$beta_reg, condition$n_id) * tempdens + resid_dens
  # covariate_oustrength = rep(condition$beta_reg, condition$n_id) * outstrength + resid_cent
  # correlation matrix of true effects
  rho <- c(
          1, 0, .2, .4,
          0, 1, 0, 0,
         .2, 0, 1, 0,
         .4, 0 , 0, 1) |> matrix(4, 4, byrow = T)
  
  # cholesky decomposition of rho
  L <- chol(rho)
  
  # Generate covariates with multiple levels of correlation
  covariate_temp_dens <- cbind(tempdens, 
                               rnorm(n_id), 
                               rnorm(n_id),
                               rnorm(n_id))
  covariate_cont_dens <- cbind(contdens, 
                               rnorm(n_id), 
                               rnorm(n_id),
                               rnorm(n_id))
  covariate_out_strength <- cbind(outstrength, 
                                  rnorm(n_id), 
                                  rnorm(n_id),
                                  rnorm(n_id))
  
  covariate_temp_dens <- covariate_temp_dens %*% L
  covariate_cont_dens <- covariate_cont_dens %*% L
  covariate_out_strength <- covariate_out_strength %*% L
  
  # Return data and true centralities
  ret_data <- list(
    data = ml_sim$data,
    covariate_temp_dens = covariate_temp_dens,
    covariate_out_strength = covariate_out_strength,
    covariate_cont_dens = covariate_cont_dens,
    true_cent = true_cent
  )
  
  return(ret_data)
  
  
}

```


# Analysis
TODO somehow GIMME does repeat without end here

```{r data-analysis}
sim_analyse <- function(condition, dat, fixed_objects = NULL){
  
  #--- Preparation
  SimDesign::Attach(fixed_objects)
  # # Split data for idiographic models
  # data_list <- split(dat$data, dat$data$ID)
  # 
  # # remove ID column in data_list explicitly by name, not by position
  # data_list <- lapply(data_list, function(x){
  #   x <- dplyr::select(x, -ID)
  # })
  # 
  # # for graphicalVAR only: standardize
  # data_list_scale <- lapply(data_list, function(x){
  #   x <- scale(x)
  # })
  
  # Concatenate list of data into dataframe with id column
  df_data <- dplyr::bind_rows(purrr::map(dat$data, dplyr::as_tibble, .id = "ID")) 
  
  
  
  #--- graphicalVAR
  # Fit models
  fit_gvar <- lapply(dat$data, function(x){
    graphicalVAR::graphicalVAR(x, 
                               nLambda = 50,
                               verbose = FALSE,
                               gamma = 0, 
                               scale = FALSE)
  })
 
  
  # Obtain centralities
  cent_gvar <- lapply(fit_gvar, function(x){
    centrality_gvar(x)
  })
  dens_temp_gvar <- sapply(cent_gvar, function(x){
    x$dens_temp
  })
  dens_cont_gvar <- sapply(cent_gvar, function(x){
    x$dens_cont
  })
  outstrength_gvar <- sapply(cent_gvar, function(x) unname(x$outstrength[1]))
  
  # Fit regression
  reg_gvar_temp_dens <- lapply(2:4, function(i) lm(dat$covariate_temp_dens[, i] ~ dens_temp_gvar))
  reg_gvar_cont_dens <- lapply(2:4, function(i) lm(dat$covariate_cont_dens[, i] ~ dens_cont_gvar))
  reg_gvar_out_strength <- lapply(2:4, function(i) lm(dat$covariate_out_strength[, i] ~ outstrength_gvar))
  
  #--- GIMME
  
  # Fit model
  # fit_gimme <- gimme::gimme(dat$data,
  #                           ar = TRUE,
  #                           subgroup = TRUE,
  #                           plot = FALSE,
  #                           hybrid = FALSE,
  #                           groupcutoff = .50,
  #                           subcutoff = .50)
  # 
  # # Obtain centralities
  # cent_gimme <- centrality_gimme(fit_gimme)
  # dens_temp_gimme <- sapply(cent_gimme, function(x){
  #   x$dens_temp
  # })
  # dens_cont_gimme <- sapply(cent_gimme, function(x){
  #   x$dens_cont
  # })
  # outstrength_gimme <- sapply(cent_gimme, function(x) unname(x$outstrength[1]))
  # 
  # # Fit regression
  # reg_gimme_temp_dens <- lapply(2:4, function(i) lm(dat$covariate_temp_dens[, i] ~ dens_temp_gimme))
  # reg_gimme_cont_dens <- lapply(2:4, function(i) lm(dat$covariate_cont_dens[, i] ~ dens_cont_gimme))
  # reg_gvar_out_strength <- lapply(2:4, function(i) lm(dat$covariate_out_strength[, i] ~ outstrength_gimme))

  # #--- frequentist mlVAR

  # Fit model
  fit_mlvar <- mlVAR::mlVAR(df_data,
                            vars = c("V1", "V2", "V3", "V4", "V5", "V6"),
                            idvar = "ID",
                            estimator = "lmer",
                            contemporaneous = "correlated",
                            temporal = "correlated",
                            nCores = 1,
                            scale = FALSE)

  # Obtain centralities
  cent_mlvar <- centrality_mlvar(fit_mlvar)
  temp_dens_mlvar <- sapply(cent_mlvar, function(x){
    x$temporal_dens
  })
  cont_dens_mlvar <- sapply(cent_mlvar, function(x){
    x$contemporaneous_dens
  })
  outstrength_mlvar <- sapply(cent_mlvar, function(x){
    x$outstrength[1]
  })

  # Fit regression
  reg_mlvar_temp_dens <- lapply(2:4, function(i) lm(dat$covariate_temp_dens[, i] ~ temp_dens_mlvar))
  reg_mlvar_cont_dens <- lapply(2:4, function(i) lm(dat$covariate_cont_dens[, i] ~ cont_dens_mlvar))
  reg_mlvar_out_strength <- lapply(2:4, function(i) lm(dat$covariate_out_strength[, i] ~ outstrength_mlvar))
  # 
  #--- Bayesian mlVAR
  
  # Fit model
  # fit_blmvar <- fit_mlvar_stan(
  #                df_data,
  #                regression_outcome,
  #                n_person = n_id,
  #                n_var = n_var,
  #                n_timepoints = n_tp,
  #                n_chains = 4,
  #                n_cores = 1,
  #                # "variational" or "sampling"
  #                method = "variational",
  #                stan_model_compiled = mlvar_model
  #                )
  
  # Obtain centralities
  # cent_bmlvar <- centrality_bmlvar(fit_bmlvar)
  # dens_temp_bmlvar <- vapply(cent_bmlvar, function(x){
  #   x$dens_temp
  # }, numeric(1))
  # outstrength_bmlvar <- vapply(cent_bmlvar, function(x){
  #   x$outstrength[1]
  # }, numeric(1))
  
  # Obtain regression coefficients

  
  #--- Return Results
  # Also return true centralities for comparison later
  ret_results <- list(
    gvar = list(
      fit_gvar = fit_gvar,
      dens_temp = dens_temp_gvar,
      outstrength = outstrength_gvar,
      reg_tempdens = reg_gvar_tempdens,
      reg_outstrength = reg_gvar_outstrength
    ),
    # gimme = list(
    #   fit_gimme = fit_gimme,
    #   dens_temp = dens_temp_gimme,
    #   outstrength = outstrength_gimme,
    #   reg_tempdens = reg_gimme_tempdens,
    #   reg_outstrength = reg_gimme_outstrength
    # ),
    mlvar = list(
      fit_mlvar = fit_mlvar,
      dens_temp = dens_temp_mlvar,
      outstrength = outstrength_mlvar,
      reg_tempdens = reg_mlvar_tempdens,
      reg_outstrength = reg_mlvar_outstrength
    ),
    # bmlvar = list(
    #   fit_blmvar = fit_blmvar,
    #   dens_temp = dens_temp_bmlvar,
    #   outstrength = outstrength_bmlvar,
    #   reg_tempdens = reg_bmlvar_tempdens,
    #   reg_outstrength = reg_bmlvar_outstrength
    # ),
    true_cent = dat$true_cent,
    data = data_list
  )
  return(ret_results)
  
}

```



# Summary


```{r summarize}
sim_summarise <- function(condition, results, fixed_objects = NULL){
  
  #--- Preparation
  SimDesign::Attach(fixed_objects)

  #--- Parameter recovery  
  # IMPORTANT: Keep in mind structure of mlVARsim object (rows vs. cols)
  #-- RMSE
  #- LASSO GVAR
  # TODO IMPORTANT! THINK ABOUT SCALING
  # Temporal
  rmse_beta_gvar <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$gvar$fit_gvar)){
      return(NA)
    } 
    else{
      # TODO THINK ABOUT SCALING HERE
      rmse_mean_list(results[[i]]$gvar$fit_gvar$XXX, results[[i]]$XXX)
    }

  })
  # Contemporaneous
  rmse_pcor_gvar <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$gvar$fit_gvar)){
      return(NA)
    } 
    else{
      # TODO THINK ABOUT SCALING HERE
      rmse_mean_list(results[[i]]$gvar$fit_gvar$XXX, results[[i]]$XXX)
    }
  })
    
  #- GIMME
  # Temporal
  rmse_beta_gimme <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$gimme$fit_gimme)){
      return(NA)
    } 
    else{
      # TODO THINK ABOUT SCALING HERE
      rmse_mean_list(results[[i]]$gimme$fit_gimme$XXX, results[[i]]$XXX)
    }
  })
  # Contemporaneous  
  rmse_pcor_gimme <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$gimme$fit_gimme)){
      return(NA)
    } 
    else{
      # TODO THINK ABOUT SCALING HERE
      rmse_mean_list(results[[i]]$gimme$fit_gimme$XXX, results[[i]]$XXX)
    }
  })
  
    
  #- mlVAR
  # Temporal
  rmse_beta_mlvar <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$mlvar$fit_mlvar)){
      return(NA)
    } 
    else{
      # TODO THINK ABOUT SCALING HERE
      rmse_mean_list(results[[i]]$mlvar$fit_mlvar$XXX, results[[i]]$XXX)
    }
  })
  # Contemporaneous
  rmse_pcor_mlvar <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$mlvar$fit_mlvar)){
      return(NA)
    } 
    else{
      # TODO THINK ABOUT SCALING HERE
      rmse_mean_list(results[[i]]$mlvar$fit_mlvar$XXX, results[[i]]$XXX)
    }
  })
    
  #- BmlVAR
  # Temporal
  rmse_beta_bmlvar <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$bmlvar$fit_bmlvar)){
      return(NA)
    } 
    else{
      # TODO THINK ABOUT SCALING HERE
      rmse_mean_list(results[[i]]$bmlvar$fit_bmlvar$XXX, results[[i]]$XXX)
    }
  })
  # Contemporaneous
  rmse_pcor_bmlvar <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$bmlvar$fit_bmlvar)){
      return(NA)
    } 
    else{
      # TODO THINK ABOUT SCALING HERE
      rmse_mean_list(results[[i]]$bmlvar$fit_bmlvar$XXX, results[[i]]$XXX)
    }
  })
    
  #-- MCSE
  #- LASSO GVAR
    
  #- GIMME
    
  #- mlVAR
    
  #- BmlVar 
    
    
    
    
  #-- Bias
  #- LASSO GVAR
  
    
  #- GIMME
    
    
  #- mlVAR
    
  #- BmlVar
    
  #-- MCSE
  #- LASSO GVAR
    
  #- GIMME
    
  #- mlVAR
    
  #- BmlVar 
    
  
    
  #--- Centrality
  #-- Bias
  #- LASSO GVAR
    
  #- GIMME
    
  #- mlVAR
    
  #- BmlVar
  
  #-- MCSE
  #- LASSO GVAR
    
  #- GIMME
    
  #- mlVAR
    
  #- BmlVar
  
   
     
  #-- Rank-Order between individuals
  #- LASSO GVAR
    
  #- GIMME
    
  #- mlVAR
    
  #- BmlVar
    
  
    
  #-- Most central within individuals
  #- LASSO GVAR
  mostcent_beta_gvar <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$gvar$fit_gvar)){
      return(NA)
    } 
  else{
      most_cent_ident(results[[i]]$gvar$fit_gvar$XXX, results[[i]]$XXX)
    }

  })  
  mostcent_pcor_gvar <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$gvar$fit_gvar)){
      return(NA)
    } 
  else{
      most_cent_ident(results[[i]]$gvar$fit_gvar$XXX, results[[i]]$XXX)
    }

  })
  #- GIMME
  mostcent_beta_gimme <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$gimme$fit_gimme)){
      return(NA)
    } 
  else{
      most_cent_ident(results[[i]]$gimme$fit_gimme$XXX, results[[i]]$XXX)
    }

  })
  mostcent_pcor_gimme <- lapply(seq_along(results), function(i){
    if(is.null(results[[i]]$gimme$fit_gimme)){
      return(NA)
    } 
  else{
      most_cent_ident(results[[i]]$gimme$fit_gimme$XXX, results[[i]]$XXX)
    }

  })
    
  #- mlVAR
    
  #- BmlVar 
  
  
  
  #--- Regression
  #-- RMSE
  #- LASSO GVAR
  
  
    
  #- GIMME
    
  #- mlVAR
    
  #- BmlVar
  rmse_reg_tempdens <- ""
    
  rmse_reg_outstrength <- ""
    
    
  #-- MCSE
  #- LASSO GVAR
    
  #- GIMME
    
  #- mlVAR
    
  #- BmlVar
  rmsemcse_reg_tempdens <- ""
  rmsemcse_reg_outstrength <- ""  
  
    
  #--- Return

  
}


```


# Executing Simulation

```{r run-sim}
# For testing
df_design_test <- df_design[1,]
sim_pars$n_id <- 25


sim_results <- SimDesign::runSimulation(
                                    design = df_design_test, 
                                    replications = 2, 
                                    generate = sim_generate, 
                                    analyse = sim_analyse, 
                                    summarise = sim_summarise,
                                    fixed_objects = sim_pars,
                                    parallel = TRUE,
                                    packages = c("tidyverse", 
                                                 "gimme",
                                                 "mlVAR",
                                                 "graphicalVAR"),
                                    save_results = TRUE,
                                    ncores = 2,
                                    debug = "analyse"
                                    # filename = "centrality-simulation.rds",
                                    # save_seeds = TRUE
                                    )

SimClean()

```


# Visualization



